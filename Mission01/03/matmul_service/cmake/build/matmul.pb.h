// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matmul.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_matmul_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_matmul_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_matmul_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_matmul_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_matmul_2eproto;
namespace matmul {
class IsOK;
struct IsOKDefaultTypeInternal;
extern IsOKDefaultTypeInternal _IsOK_default_instance_;
class Matrix;
struct MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
}  // namespace matmul
PROTOBUF_NAMESPACE_OPEN
template<> ::matmul::IsOK* Arena::CreateMaybeMessage<::matmul::IsOK>(Arena*);
template<> ::matmul::Matrix* Arena::CreateMaybeMessage<::matmul::Matrix>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace matmul {

// ===================================================================

class Matrix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matmul.Matrix) */ {
 public:
  inline Matrix() : Matrix(nullptr) {}
  ~Matrix() override;
  explicit PROTOBUF_CONSTEXPR Matrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Matrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Matrix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Matrix& from) {
    Matrix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matmul.Matrix";
  }
  protected:
  explicit Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMDataFieldNumber = 3,
    kMRowsFieldNumber = 1,
    kMColsFieldNumber = 2,
  };
  // repeated float m_data = 3 [packed = true];
  int m_data_size() const;
  private:
  int _internal_m_data_size() const;
  public:
  void clear_m_data();
  private:
  float _internal_m_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_m_data() const;
  void _internal_add_m_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_m_data();
  public:
  float m_data(int index) const;
  void set_m_data(int index, float value);
  void add_m_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      m_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_m_data();

  // uint32 m_rows = 1;
  void clear_m_rows();
  uint32_t m_rows() const;
  void set_m_rows(uint32_t value);
  private:
  uint32_t _internal_m_rows() const;
  void _internal_set_m_rows(uint32_t value);
  public:

  // uint32 m_cols = 2;
  void clear_m_cols();
  uint32_t m_cols() const;
  void set_m_cols(uint32_t value);
  private:
  uint32_t _internal_m_cols() const;
  void _internal_set_m_cols(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:matmul.Matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > m_data_;
    uint32_t m_rows_;
    uint32_t m_cols_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_matmul_2eproto;
};
// -------------------------------------------------------------------

class IsOK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matmul.IsOK) */ {
 public:
  inline IsOK() : IsOK(nullptr) {}
  ~IsOK() override;
  explicit PROTOBUF_CONSTEXPR IsOK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsOK(const IsOK& from);
  IsOK(IsOK&& from) noexcept
    : IsOK() {
    *this = ::std::move(from);
  }

  inline IsOK& operator=(const IsOK& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsOK& operator=(IsOK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsOK& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsOK* internal_default_instance() {
    return reinterpret_cast<const IsOK*>(
               &_IsOK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IsOK& a, IsOK& b) {
    a.Swap(&b);
  }
  inline void Swap(IsOK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsOK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsOK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsOK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsOK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IsOK& from) {
    IsOK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsOK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matmul.IsOK";
  }
  protected:
  explicit IsOK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsokFieldNumber = 1,
  };
  // bool isok = 1;
  void clear_isok();
  bool isok() const;
  void set_isok(bool value);
  private:
  bool _internal_isok() const;
  void _internal_set_isok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:matmul.IsOK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool isok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_matmul_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Matrix

// uint32 m_rows = 1;
inline void Matrix::clear_m_rows() {
  _impl_.m_rows_ = 0u;
}
inline uint32_t Matrix::_internal_m_rows() const {
  return _impl_.m_rows_;
}
inline uint32_t Matrix::m_rows() const {
  // @@protoc_insertion_point(field_get:matmul.Matrix.m_rows)
  return _internal_m_rows();
}
inline void Matrix::_internal_set_m_rows(uint32_t value) {
  
  _impl_.m_rows_ = value;
}
inline void Matrix::set_m_rows(uint32_t value) {
  _internal_set_m_rows(value);
  // @@protoc_insertion_point(field_set:matmul.Matrix.m_rows)
}

// uint32 m_cols = 2;
inline void Matrix::clear_m_cols() {
  _impl_.m_cols_ = 0u;
}
inline uint32_t Matrix::_internal_m_cols() const {
  return _impl_.m_cols_;
}
inline uint32_t Matrix::m_cols() const {
  // @@protoc_insertion_point(field_get:matmul.Matrix.m_cols)
  return _internal_m_cols();
}
inline void Matrix::_internal_set_m_cols(uint32_t value) {
  
  _impl_.m_cols_ = value;
}
inline void Matrix::set_m_cols(uint32_t value) {
  _internal_set_m_cols(value);
  // @@protoc_insertion_point(field_set:matmul.Matrix.m_cols)
}

// repeated float m_data = 3 [packed = true];
inline int Matrix::_internal_m_data_size() const {
  return _impl_.m_data_.size();
}
inline int Matrix::m_data_size() const {
  return _internal_m_data_size();
}
inline void Matrix::clear_m_data() {
  _impl_.m_data_.Clear();
}
inline float Matrix::_internal_m_data(int index) const {
  return _impl_.m_data_.Get(index);
}
inline float Matrix::m_data(int index) const {
  // @@protoc_insertion_point(field_get:matmul.Matrix.m_data)
  return _internal_m_data(index);
}
inline void Matrix::set_m_data(int index, float value) {
  _impl_.m_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:matmul.Matrix.m_data)
}
inline void Matrix::_internal_add_m_data(float value) {
  _impl_.m_data_.Add(value);
}
inline void Matrix::add_m_data(float value) {
  _internal_add_m_data(value);
  // @@protoc_insertion_point(field_add:matmul.Matrix.m_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::_internal_m_data() const {
  return _impl_.m_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::m_data() const {
  // @@protoc_insertion_point(field_list:matmul.Matrix.m_data)
  return _internal_m_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::_internal_mutable_m_data() {
  return &_impl_.m_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::mutable_m_data() {
  // @@protoc_insertion_point(field_mutable_list:matmul.Matrix.m_data)
  return _internal_mutable_m_data();
}

// -------------------------------------------------------------------

// IsOK

// bool isok = 1;
inline void IsOK::clear_isok() {
  _impl_.isok_ = false;
}
inline bool IsOK::_internal_isok() const {
  return _impl_.isok_;
}
inline bool IsOK::isok() const {
  // @@protoc_insertion_point(field_get:matmul.IsOK.isok)
  return _internal_isok();
}
inline void IsOK::_internal_set_isok(bool value) {
  
  _impl_.isok_ = value;
}
inline void IsOK::set_isok(bool value) {
  _internal_set_isok(value);
  // @@protoc_insertion_point(field_set:matmul.IsOK.isok)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace matmul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_matmul_2eproto
