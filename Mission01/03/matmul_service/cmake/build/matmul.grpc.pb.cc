// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: matmul.proto

#include "matmul.pb.h"
#include "matmul.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace matmul {

static const char* Mat_Mul_method_names[] = {
  "/matmul.Mat_Mul/set_weight",
  "/matmul.Mat_Mul/matmul_with_x",
};

std::unique_ptr< Mat_Mul::Stub> Mat_Mul::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Mat_Mul::Stub> stub(new Mat_Mul::Stub(channel, options));
  return stub;
}

Mat_Mul::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_set_weight_(Mat_Mul_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_matmul_with_x_(Mat_Mul_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Mat_Mul::Stub::set_weight(::grpc::ClientContext* context, const ::matmul::Matrix& request, ::matmul::IsOK* response) {
  return ::grpc::internal::BlockingUnaryCall< ::matmul::Matrix, ::matmul::IsOK, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_weight_, context, request, response);
}

void Mat_Mul::Stub::async::set_weight(::grpc::ClientContext* context, const ::matmul::Matrix* request, ::matmul::IsOK* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::matmul::Matrix, ::matmul::IsOK, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_weight_, context, request, response, std::move(f));
}

void Mat_Mul::Stub::async::set_weight(::grpc::ClientContext* context, const ::matmul::Matrix* request, ::matmul::IsOK* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_weight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matmul::IsOK>* Mat_Mul::Stub::PrepareAsyncset_weightRaw(::grpc::ClientContext* context, const ::matmul::Matrix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::matmul::IsOK, ::matmul::Matrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_weight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matmul::IsOK>* Mat_Mul::Stub::Asyncset_weightRaw(::grpc::ClientContext* context, const ::matmul::Matrix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_weightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Mat_Mul::Stub::matmul_with_x(::grpc::ClientContext* context, const ::matmul::Matrix& request, ::matmul::Matrix* response) {
  return ::grpc::internal::BlockingUnaryCall< ::matmul::Matrix, ::matmul::Matrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_matmul_with_x_, context, request, response);
}

void Mat_Mul::Stub::async::matmul_with_x(::grpc::ClientContext* context, const ::matmul::Matrix* request, ::matmul::Matrix* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::matmul::Matrix, ::matmul::Matrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_matmul_with_x_, context, request, response, std::move(f));
}

void Mat_Mul::Stub::async::matmul_with_x(::grpc::ClientContext* context, const ::matmul::Matrix* request, ::matmul::Matrix* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_matmul_with_x_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matmul::Matrix>* Mat_Mul::Stub::PrepareAsyncmatmul_with_xRaw(::grpc::ClientContext* context, const ::matmul::Matrix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::matmul::Matrix, ::matmul::Matrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_matmul_with_x_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matmul::Matrix>* Mat_Mul::Stub::Asyncmatmul_with_xRaw(::grpc::ClientContext* context, const ::matmul::Matrix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmatmul_with_xRaw(context, request, cq);
  result->StartCall();
  return result;
}

Mat_Mul::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mat_Mul_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mat_Mul::Service, ::matmul::Matrix, ::matmul::IsOK, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mat_Mul::Service* service,
             ::grpc::ServerContext* ctx,
             const ::matmul::Matrix* req,
             ::matmul::IsOK* resp) {
               return service->set_weight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mat_Mul_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mat_Mul::Service, ::matmul::Matrix, ::matmul::Matrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mat_Mul::Service* service,
             ::grpc::ServerContext* ctx,
             const ::matmul::Matrix* req,
             ::matmul::Matrix* resp) {
               return service->matmul_with_x(ctx, req, resp);
             }, this)));
}

Mat_Mul::Service::~Service() {
}

::grpc::Status Mat_Mul::Service::set_weight(::grpc::ServerContext* context, const ::matmul::Matrix* request, ::matmul::IsOK* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mat_Mul::Service::matmul_with_x(::grpc::ServerContext* context, const ::matmul::Matrix* request, ::matmul::Matrix* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace matmul

